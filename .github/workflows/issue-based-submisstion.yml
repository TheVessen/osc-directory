name: Process Project Issue

on:
  issues:
    types: [labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: "Issue number to process"
        required: true

jobs:
  process-project:
    if: contains(github.event.label.name, 'approved') || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Get issue details
        id: issue-details
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = ${{ github.event.issue.number || github.event.inputs.issue_number }};

            // Get issue details
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            // Extract project name from issue body or title
            const issueBody = issue.body || '';
            const issueTitle = issue.title || '';

            // Try to extract project name from issue body (assuming it's in a form field)
            let projectName = '';

            // Look for patterns like "Project Name: Something" or "### Project Name\nSomething"
            const namePatterns = [
              /(?:Project Name|Name):\s*(.+)/i,
              /### Project Name\s*\n(.+)/i,
              /\*\*Project Name\*\*:\s*(.+)/i,
              /Project:\s*(.+)/i
            ];

            for (const pattern of namePatterns) {
              const match = issueBody.match(pattern);
              if (match && match[1]) {
                projectName = match[1].trim();
                break;
              }
            }

            // If no project name found in body, try to extract from title
            if (!projectName) {
              // Remove common prefixes/suffixes from title
              projectName = issueTitle
                .replace(/^\[?(?:Add|Submit|New)\]?\s*/i, '')
                .replace(/\s*(?:submission|project|request)$/i, '')
                .trim();
            }

            // Sanitize project name for use in branch names
            const sanitizedName = projectName
              .toLowerCase()
              .replace(/[^a-z0-9\s-]/g, '') // Remove special characters
              .replace(/\s+/g, '-') // Replace spaces with hyphens
              .replace(/-+/g, '-') // Replace multiple hyphens with single
              .replace(/^-|-$/g, '') // Remove leading/trailing hyphens
              .substring(0, 50); // Limit length

            // Set outputs
            core.setOutput('issue-number', issueNumber);
            core.setOutput('issue-title', issueTitle);
            core.setOutput('project-name', projectName);
            core.setOutput('sanitized-name', sanitizedName);

            console.log(`Issue #${issueNumber}: ${issueTitle}`);
            console.log(`Project name: ${projectName}`);
            console.log(`Sanitized name: ${sanitizedName}`);

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install backend dependencies
        run: cd backend && pnpm install

      - name: Parse issue data
        run: cd backend && pnpm tsx scripts/parse-issue.ts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.issue-details.outputs.issue-number }}

      - name: Add to projects.json
        run: cd backend && pnpm tsx scripts/add-issue-project.ts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.issue-details.outputs.issue-number }}

      - name: Update project metadata
        run: cd backend && pnpm tsx scripts/update-metadata.ts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate README tables
        run: cd backend && pnpm tsx scripts/generate-readme-tables.ts

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "feat: add ${{ steps.issue-details.outputs.project-name || 'new project' }} from issue #${{ steps.issue-details.outputs.issue-number }}"
          title: "Add ${{ steps.issue-details.outputs.project-name || 'project' }} (issue #${{ steps.issue-details.outputs.issue-number }})"
          body: |
            Automatically processed project submission from issue #${{ steps.issue-details.outputs.issue-number }}.

            **Project:** ${{ steps.issue-details.outputs.project-name || 'Unknown' }}
            **Issue:** ${{ steps.issue-details.outputs.issue-title }}

            ## Changes
            - ‚úÖ Added new project to projects.json
            - ‚úÖ Updated project metadata from GitHub API  
            - ‚úÖ Regenerated README tables

            Closes #${{ steps.issue-details.outputs.issue-number }}
          branch: add-${{ steps.issue-details.outputs.sanitized-name || 'project' }}-${{ steps.issue-details.outputs.issue-number }}
          delete-branch: true

      - name: Close issue with success message
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const projectName = '${{ steps.issue-details.outputs.project-name }}';
            const displayName = projectName ? `**${projectName}**` : 'your project';

            github.rest.issues.createComment({
              issue_number: ${{ steps.issue-details.outputs.issue-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ **Project successfully processed!** \n\n${displayName} has been processed and a pull request has been created. The project will be added to the directory once the PR is merged.\n\nThank you for your contribution! üéâ`
            });

            github.rest.issues.update({
              issue_number: ${{ steps.issue-details.outputs.issue-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              labels: ['processed', 'approved']
            });

      - name: Comment on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.issue-details.outputs.issue-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '‚ùå **Processing failed** \n\nThere was an error processing your project submission. Please check the workflow logs for details or contact a maintainer.\n\nWorkflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
            });

            github.rest.issues.addLabels({
              issue_number: ${{ steps.issue-details.outputs.issue-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['processing-failed']
            });
