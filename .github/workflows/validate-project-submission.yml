name: Validate Project Submission

on:
  issues:
    types: [opened, edited, labeled]

jobs:
  validate:
    if: contains(github.event.issue.labels.*.name, 'submission')
    runs-on: ubuntu-latest
    permissions:
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Install dependencies
        run: cd backend && pnpm install

      - name: Parse issue data
        id: parse
        run: cd backend && pnpm tsx scripts/parse-issue.ts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        continue-on-error: true

      - name: Validate submission
        id: validate
        if: steps.parse.outcome == 'success'
        run: cd backend && pnpm tsx scripts/validate-issue-project.ts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        continue-on-error: true

      - name: Update labels and comment based on validation
        uses: actions/github-script@v7
        with:
          script: |
            const parseSuccess = '${{ steps.parse.outcome }}' === 'success';
            const validateSuccess = '${{ steps.validate.outcome }}' === 'success';
            const success = parseSuccess && validateSuccess;
            const issueNumber = ${{ github.event.issue.number }};

            // Remove old validation labels
            const currentLabels = context.payload.issue.labels.map(label => label.name);
            const labelsToRemove = currentLabels.filter(label => 
              ['validation-passed', 'validation-failed', 'ready-for-approval'].includes(label)
            );

            for (const label of labelsToRemove) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueNumber,
                  name: label
                });
              } catch (error) {
                // Label might not exist, ignore
              }
            }

            if (success) {
              // Add success labels
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['validation-passed', 'ready-for-approval']
              });
              
              // Success comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: '‚úÖ **Validation passed!**\n\nThis submission looks good and is ready for maintainer review.\n\n**Next steps:**\n- A maintainer will review your submission\n- If approved, the project will be automatically added to the directory\n\nThank you for your contribution! üéâ'
              });
            } else {
              // Add failure label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                labels: ['validation-failed']
              });
              
              // Determine error message
              let errorMsg = '‚ùå **Validation failed!**\n\nThere are some issues with your submission that need to be fixed:\n\n';
              
              if (!parseSuccess) {
                errorMsg += '**Issue parsing failed:**\n- Please check that you filled out the form correctly\n- Make sure all required fields are completed\n\n';
              }
              
              errorMsg += '**To fix:**\n1. Check the [workflow logs](' + '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' + ') for detailed error messages\n2. Edit your issue to fix the problems\n3. The validation will run automatically when you update the issue\n\n**Common issues:**\n- Invalid GitHub repository URL\n- Repository not accessible or doesn\'t exist\n- Duplicate project already in directory';
              
              // Failure comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: errorMsg
              });
            }
